1、树概念及结构
2、二叉树概念及结构
3、二叉树顺序结构及实现
4、二叉树链式结构及实现


1、树概念及结构
树的概念：树是一种非线性的数据结构，它是由n(n>=0)个有限结点组成一个具有层次关系的集合。把它叫做树是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下。

有一个特殊的结点，称为根结点，根节点没有前驱结点。

树的本质是递归
树的性质：
1、子树是不相交的
2、除了根结点外，每个结点有且仅有一个父结点（树中没有环）
3、一颗N个结点的树有N-1条边 

树的表示：树的结构相对线性表就比较复杂了，要存储表示起来就比较麻烦了，实际中树有很多种表示方法，如：双亲表示法，孩子表示法，孩子兄弟表示法等。
struct TreeNode
{
      int val;
      SeqList childsArr;   
      //指针数组，顺序表中的数据存的是struct   TreeNode*
}


左孩子右兄弟法（孩子兄弟表示法，也最常用）
typedef int DataType;
struct Node
{
        struct Node* _FirstChild1;   //第一个孩子结点
        struct Node* _pNextBrother;  //指向下一个兄弟结点
        DataType _data;   //结点中的数据域
}

这种方法无论树中一个结点有多少个孩子，都可以表示
因为我只指向第一个孩子，剩下的孩子，让孩子之间用兄弟指针串起来



2、二叉树的概念及结构
概念：一棵二叉树是结点的一个有限集合，该集合或者为空，或者是由一个根结点加上两棵别称为左子树和右子树的二叉树组成。

二叉树的特点：
1、每个结点最多有两颗子树，即二叉树不存在大于2的结点。
2、二叉树的子树有左右之分，其子树的次序不能颠倒。

特殊的二叉树：
1、满二叉树：每一层的节点数都达到最大值,总结点个数为(2^k)-1
2、完全二叉树：假设有k层，前k-1层都是满的，最后一层可以不满，
                        且最后一层从左到右都是连续的。

二叉树的存储结构：
二叉树一般可以使用两种结构存储，一种顺序结构，一种链式结构。

二叉树的性质：
1、若规定根节点的层数为1，则一棵非空二叉树的第i层上最多有2^(i-1)个结点。
2、若规定根节点的层数为1，则深度为h的二叉树的最大节点数是2^h-1.
3、对任何一棵二叉树，如果度为0其叶节点个数为n0,度为2的分支节点个数为n2，则有n0 = n2+1.
4、若规定根节点的层数为1，具有n个节点的满二叉树的深度，h=Log(n+1).