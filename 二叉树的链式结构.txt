二叉树顺序存储：
顺序结构存储就是使用数组来存储，一般使用数组只适合表示完全二叉树，因为不是完全二叉树会有空间浪费。而现实使用中只有堆才会使用数组来存储，二叉树顺序存储在物理上是一个数组，在逻辑上是一棵二叉树。


二叉树的链式存储：
二叉树的链式存储结构是指用链表来表示一棵二叉树。通常的方法是链表中每个节点由三个域组成，数据域和左右指针域，左右指针分别用来给出该节点左孩子和右孩子所在的链节点的存储地址。链式结构又分为二叉链和三叉链，当前我们学习中一般都是二叉链，高阶数据结构例如红黑树会用到三叉链（又多了一个指向父亲节点的指针）。

struct BinaryTreeNode
{
      struct BinTreeNode* _pLeft;  //指向当前节点左孩子
      struct BinTreeNode* _pright;  //指向当前节点右孩子
      BTDataType _data;  //当前节点值域
}


四种遍历顺序:
1、前序遍历(先根遍历)   根-》左子树-》右子树
2、中序遍历(中根遍历)   左子树-》根-》右子树
3、后序遍历(后根遍历)   左子树-》右子树-》根
4、层序遍历